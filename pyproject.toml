[project]
name = "wtforms_formly"
description = "Form validation and rendering for Python web development with formly"
readme = "README.rst"
license = { file = "LICENSE.rst" }
maintainers = [{ name = "WTForms" }]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
requires-python = ">=3.12"
dependencies = [
    "MarkupSafe",
]
dynamic = ["version"]

[project.urls]
Documentation = "https://wtforms.readthedocs.io"
Changes = "https://wtforms.readthedocs.io/changes"
"Source Code" = "https://github.com/wtforms/wtforms/"
"Issue Tracker" = "https://github.com/wtforms/wtforms/issues"
Chat = "https://discord.gg/pallets"

[project.optional-dependencies]
email = ["email_validator"]
tests = [
    "pytest>=8.2.2",
    "babel>=2.15.0",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/wtforms_formly"]

[tool.hatch.version]
path = "src/wtforms_formly/__init__.py"

[tool.hatch.build]
include = [
    "src/",
    "docs/",
    "tests/",
    "CHANGES.rst",
    "tox.ini",
]
exclude = [
    "docs/_build/",
]
artifacts = ["src/wtforms_formly/locale/**/*.mo"]

[tool.hatch.build.hooks.custom]
dependencies = [
    "Babel>=2.6.0",
    "setuptools; python_version>='3.12'",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [
    "error",
]

[tool.coverage.run]
branch = true
source = ["wtforms_formly", "tests"]

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "except ImportError",
    "pass",
]

[tool.flake8]
# B = bugbear
# E = pycodestyle errors
# F = flake8 pyflakes
# W = pycodestyle warnings
# B9 = bugbear opinions
# ISC = implicit-str-concat
select = ["B", "E", "F", "W", "B9", "ISC"]
ignore = [
    # slice notation whitespace, invalid
    "E203",
    # line length, handled by bugbear B950
    "E501",
    # bare except, handled by bugbear B001
    "E722",
    # bin op line break, invalid
    "W503",
    # requires 'strict' argument for 'zip'
    # that needs python >= 3.10
    "B905",
]
# up to 88 allowed by bugbear B950
max-line-length = 80
per-file-ignores = [
    # __init__ modules export names
    "**/__init__.py: F401, F403",
]

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "W191", # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-third-party = ["fastapi", "pydantic", "starlette"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.pdm]
distribution = true
